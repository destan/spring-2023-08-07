package com.example.demo;

import com.example.demo.profile.Profile;
import com.example.demo.profile.ProfileValidator;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequiredArgsConstructor
@RequestMapping("users")
class UserController {

    private final UserService usersService;

    private final PostDao postDao;

    // Following will be generated by @RequiredArgsConstructor:
    // public UserController(UserService usersService) {
    //     this.usersService = usersService;
    // }

    private final ProfileValidator profileValidator;

    @InitBinder
    public void initBinder(WebDataBinder binder) {
        //binder.addValidators(profileValidator);
    }

    @GetMapping
    List<User> list(@RequestParam("username") Optional<String> username) {

        if (username.isPresent()) {
            return usersService.findByUsername(username.get());
        }

        return usersService.listAll();
    }

    @GetMapping("{userId}")
    ResponseEntity<User> get(@PathVariable("userId") Long id) {
        Optional<User> user = usersService.findById(id);

        if (user.isEmpty()) {
            return ResponseEntity.notFound().build();
        }

        return ResponseEntity.ok(user.get());
    }

    @PostMapping
    ResponseEntity<User> create(@RequestBody User user) {
        return ResponseEntity.ok().body(usersService.register(user));
    }

    @PutMapping("{userId}/profile")
    ResponseEntity<Profile> updateProfile(@Valid @RequestBody Profile profile) {

        // if (bindingResult.hasErrors()) {
        //     bindingResult.getAllErrors().forEach(e -> System.out.println(e.getObjectName() + " " + e.getDefaultMessage()));
        //     return ResponseEntity.status(HttpStatus.CONFLICT).build();
        // }

        return ResponseEntity.ok().build();
    }

    // @PatchMapping("{userId}/profile")
    // ResponseEntity<Profile> patchProfile(@PathVariable Long userId, @RequestBody Profile profile) {
    //     try {
    //         Profile updatedProfile = usersService.updateProfile(userId, profile);
    //         return ResponseEntity.ok().body(updatedProfile);
    //     } catch (IllegalArgumentException e) {
    //         return ResponseEntity.notFound().build();
    //     }
    // }

    @GetMapping("{userId}/posts")
    List<UserWithPostsDto> usersPosts(@PathVariable("userId") Long userId) {

        return postDao.findUsersPosts(userId);
    }

}
